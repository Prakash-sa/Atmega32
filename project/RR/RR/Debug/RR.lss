
RR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000395  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000369  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ultrasonic>:
static volatile int i = 0;

int ultrasonic(void)
{
	
	DDRD = 0b11111011;
  7c:	8b ef       	ldi	r24, 0xFB	; 251
  7e:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	83 ed       	ldi	r24, 0xD3	; 211
  82:	90 e3       	ldi	r25, 0x30	; 48
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <ultrasonic+0x8>
  88:	00 c0       	rjmp	.+0      	; 0x8a <ultrasonic+0xe>
  8a:	00 00       	nop
	_delay_ms(50);
	
	GICR|=(1<<INT0);
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC00);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bf       	out	0x35, r24	; 53
	
	TCCR1A = 0;
  98:	1f bc       	out	0x2f, r1	; 47
	  
	int16_t COUNTA = 0;
		
	sei();
  9a:	78 94       	sei
	
	while(1)
	{
		PORTD|=(1<<PIND0);
  9c:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	95 e0       	ldi	r25, 0x05	; 5
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <ultrasonic+0x24>
		_delay_us(15);
		PORTD &=~(1<<PIND0);
  a4:	90 98       	cbi	0x12, 0	; 18
		
		COUNTA = pulse/58;
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pulse>
  aa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <pulse+0x1>
  ae:	f6 cf       	rjmp	.-20     	; 0x9c <ultrasonic+0x20>

000000b0 <__vector_1>:
		
	}
}

ISR(INT0_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	if (i==1)
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	69 f4       	brne	.+26     	; 0xe4 <__vector_1+0x34>
	{
		TCCR1B=0;
  ca:	1e bc       	out	0x2e, r1	; 46
		pulse=TCNT1;
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	9d b5       	in	r25, 0x2d	; 45
  d0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <pulse+0x1>
  d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pulse>
		TCNT1=0;
  d8:	1d bc       	out	0x2d, r1	; 45
  da:	1c bc       	out	0x2c, r1	; 44
		i=0;
  dc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
	if (i==0)
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ec:	89 2b       	or	r24, r25
  ee:	49 f4       	brne	.+18     	; 0x102 <__vector_1+0x52>
	{
		TCCR1B|=(1<<CS10);
  f0:	8e b5       	in	r24, 0x2e	; 46
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8e bd       	out	0x2e, r24	; 46
		i=1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:


int main(void)
{
	
	DDRB |= 0x0F;
 110:	87 b3       	in	r24, 0x17	; 23
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	87 bb       	out	0x17, r24	; 23
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);
 116:	8f b5       	in	r24, 0x2f	; 47
 118:	82 68       	ori	r24, 0x82	; 130
 11a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
 11c:	8e b5       	in	r24, 0x2e	; 46
 11e:	89 61       	ori	r24, 0x19	; 25
 120:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
 122:	89 b7       	in	r24, 0x39	; 57
 124:	80 61       	ori	r24, 0x10	; 16
 126:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A = 0;
 128:	1f bc       	out	0x2f, r1	; 47
	
	int16_t COUNTA = 0;
	
	ICR1=19999;
 12a:	8f e1       	ldi	r24, 0x1F	; 31
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	97 bd       	out	0x27, r25	; 39
 130:	86 bd       	out	0x26, r24	; 38
	
	
	double a2,a1,tc1,tc2;
	
	sei();
 132:	78 94       	sei
		//PORTD|=(1<<PIND0);
		//_delay_us(15);
		//PORTD &=~(1<<PIND0);
		
		//COUNTA = pulse/58;
		COUNTA =ultrasonic();
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <ultrasonic>

00000138 <__vector_7>:
	}
}


ISR(TIMER1_COMPA_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	PORTB=0x0f;
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	88 bb       	out	0x18, r24	; 24
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
