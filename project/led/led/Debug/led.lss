
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a2  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051c  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000204  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002db  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Delay>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void Delay(void){
   while(TCNT1<15625);
  6c:	8c b5       	in	r24, 0x2c	; 44
  6e:	9d b5       	in	r25, 0x2d	; 45
  70:	89 30       	cpi	r24, 0x09	; 9
  72:	9d 43       	sbci	r25, 0x3D	; 61
  74:	d8 f3       	brcs	.-10     	; 0x6c <Delay>
   TCNT1 -=15625;
  76:	8c b5       	in	r24, 0x2c	; 44
  78:	9d b5       	in	r25, 0x2d	; 45
  7a:	89 50       	subi	r24, 0x09	; 9
  7c:	9d 43       	sbci	r25, 0x3D	; 61
  7e:	9d bd       	out	0x2d, r25	; 45
  80:	8c bd       	out	0x2c, r24	; 44
  82:	08 95       	ret

00000084 <main>:



int main(void)
{
	DDRB |=(1<<PINB0);
  84:	b8 9a       	sbi	0x17, 0	; 23
	TCCR1B=(1<<CS10)|(1<<CS11);
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	8e bd       	out	0x2e, r24	; 46
    /* Replace with your application code */
    while (1) 
    {
		PORTB &=0xFE;
  8a:	c0 98       	cbi	0x18, 0	; 24
		Delay();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
		PORTB |=0x01;
  90:	c0 9a       	sbi	0x18, 0	; 24
		Delay();
  92:	0e 94 36 00 	call	0x6c	; 0x6c <Delay>
  96:	f9 cf       	rjmp	.-14     	; 0x8a <main+0x6>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
