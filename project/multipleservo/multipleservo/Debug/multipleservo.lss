
multipleservo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f6  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000541  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000267  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_7>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <avr/sfr_defs.h>

int main(void)
{
	DDRB |= 0x0F;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 60       	ori	r24, 0x0F	; 15
  70:	87 bb       	out	0x17, r24	; 23
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 68       	ori	r24, 0x82	; 130
  76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
  7e:	89 b7       	in	r24, 0x39	; 57
  80:	80 61       	ori	r24, 0x10	; 16
  82:	89 bf       	out	0x39, r24	; 57
	
	ICR1=19999;
  84:	8f e1       	ldi	r24, 0x1F	; 31
  86:	9e e4       	ldi	r25, 0x4E	; 78
  88:	97 bd       	out	0x27, r25	; 39
  8a:	86 bd       	out	0x26, r24	; 38
	
	tc1=(float)10.5556*(0)+600;
	tc2=(float)10.5556*(90)+600;
	tc3=(float)10.5556*(180)+600;
	
	sei();
  8c:	78 94       	sei
	while (1)
	{
		if (TCNT1>=590 && TCNT1<=2600)
  8e:	8c b5       	in	r24, 0x2c	; 44
  90:	9d b5       	in	r25, 0x2d	; 45
  92:	8e 34       	cpi	r24, 0x4E	; 78
  94:	92 40       	sbci	r25, 0x02	; 2
  96:	d0 f0       	brcs	.+52     	; 0xcc <main+0x60>
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	9d b5       	in	r25, 0x2d	; 45
  9c:	89 32       	cpi	r24, 0x29	; 41
  9e:	9a 40       	sbci	r25, 0x0A	; 10
  a0:	a8 f4       	brcc	.+42     	; 0xcc <main+0x60>
		{
			if(TCNT1 >=(int)600  && bit_is_set(PORTB,PINB0))   PORTB &=~(1<<PINB0);
  a2:	8c b5       	in	r24, 0x2c	; 44
  a4:	9d b5       	in	r25, 0x2d	; 45
  a6:	88 35       	cpi	r24, 0x58	; 88
  a8:	92 40       	sbci	r25, 0x02	; 2
  aa:	10 f0       	brcs	.+4      	; 0xb0 <main+0x44>
  ac:	c0 99       	sbic	0x18, 0	; 24
  ae:	c0 98       	cbi	0x18, 0	; 24
			if(TCNT1 >=(int)600 && bit_is_set(PORTB,PINB1))    PORTB &=~(1<<PINB1);
  b0:	8c b5       	in	r24, 0x2c	; 44
  b2:	9d b5       	in	r25, 0x2d	; 45
  b4:	88 35       	cpi	r24, 0x58	; 88
  b6:	92 40       	sbci	r25, 0x02	; 2
  b8:	10 f0       	brcs	.+4      	; 0xbe <main+0x52>
  ba:	c1 99       	sbic	0x18, 1	; 24
  bc:	c1 98       	cbi	0x18, 1	; 24
			if(TCNT1 >=(int)600 && bit_is_set(PORTB,PINB2))    PORTB &=~(1<<PINB2);  
  be:	8c b5       	in	r24, 0x2c	; 44
  c0:	9d b5       	in	r25, 0x2d	; 45
  c2:	88 35       	cpi	r24, 0x58	; 88
  c4:	92 40       	sbci	r25, 0x02	; 2
  c6:	10 f0       	brcs	.+4      	; 0xcc <main+0x60>
  c8:	c2 99       	sbic	0x18, 2	; 24
  ca:	c2 98       	cbi	0x18, 2	; 24
			   
		}
		if (TCNT1<590 || TCNT1>2600)
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	9d b5       	in	r25, 0x2d	; 45
  d0:	8e 34       	cpi	r24, 0x4E	; 78
  d2:	92 40       	sbci	r25, 0x02	; 2
  d4:	e0 f2       	brcs	.-72     	; 0x8e <main+0x22>
  d6:	8c b5       	in	r24, 0x2c	; 44
  d8:	9d b5       	in	r25, 0x2d	; 45
  da:	d9 cf       	rjmp	.-78     	; 0x8e <main+0x22>

000000dc <__vector_7>:
	}
}


ISR(TIMER1_COMPA_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
	PORTB=0x0f;
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
